name: Main

on: [push, workflow_dispatch]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      option: ${{ steps.module.outputs.option }}
      result: ${{ steps.module.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: module
        with:
          filters: |
            option:
              - 'option/deno.json'
            result:
              - 'result/deno.json'

  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command: ['format', 'typecheck', 'lint', 'test']
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - run: deno task ${{ matrix.command }}

  release:
    runs-on: ubuntu-latest
    needs: [prepare, verify]
    strategy:
      matrix:
        module: [option, result]
        exclude:
          - module: ${{ needs.prepare.outputs.option != 'true' && 'option' }}
          - module: ${{ needs.prepare.outputs.result != 'true' && 'result' }}
    if: ${{ github.ref == 'refs/heads/main' && (needs.prepare.outputs.option == 'true' || needs.prepare.outputs.result == 'true') }}
    outputs:
      option_release: ${{ steps.should_run.outputs.option_release == 'true' && needs.prepare.outputs.option == 'true' && 'true' }}
      result_release: ${{ steps.should_run.outputs.result_release == 'true '&& needs.prepare.outputs.result == 'true' && 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for version changes 
        working-directory: ${{ matrix.module }}
        id: should_run
        run: |
          module=${{ matrix.module }}
          if git diff HEAD^ HEAD -- 'deno.json' | grep -q '+  "version":' >/dev/null; then 
            echo "${module}_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "${module}_release=false" >> $GITHUB_OUTPUT

  publish:
    needs: release
    if: ${{ needs.release.outputs.option_release == 'true' || needs.release.outputs.result_release == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [option, result]
        registry: [jsr, npm]
        exclude:
          - module: ${{ needs.release.outputs.option_release != 'true' && 'option' }}
          - module: ${{ needs.release.outputs.result_release != 'true' && 'result' }}
    permissions:
      contents: read
      id-token: write # The OIDC ID token is used for authentication with JSR.
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Publish @fp-utils/${{ matrix.module }} to jsr
        if: ${{ matrix.registry == 'jsr' }}
        working-directory: ${{ matrix.module }}
        run: npx jsr publish
      - uses: actions/setup-node@v4
        if: ${{ matrix.registry == 'npm' }}
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Build @fp-utils/${{ matrix.module }} npm package
        if: ${{ matrix.registry == 'npm' }}
        run: deno task build --allow-net --mod ${{ matrix.module }}
      - name: Publish @fp-utils/${{ matrix.module }} to npm
        if: ${{ matrix.registry == 'npm' }}
        working-directory: ${{ matrix.module }}/dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish
